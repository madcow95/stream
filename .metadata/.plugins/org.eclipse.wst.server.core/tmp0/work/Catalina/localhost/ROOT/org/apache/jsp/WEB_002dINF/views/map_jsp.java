/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.53
 * Generated at: 2021-07-05 08:04:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class map_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"map\" style=\"width:100%;height:450px;\"></div>\r\n");
      out.write("<div class=\"map_wrap\">\r\n");
      out.write("    <div id=\"map\" style=\"width:100%;height:100%;position:relative;overflow:hidden;\"></div>\r\n");
      out.write("    <div class=\"hAddr\">\r\n");
      out.write("        <span id=\"centerAddr\"></span>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("<input type=\"text\" id=\"searchKeyword\">\r\n");
      out.write("<input type=\"text\" id=\"lat\">\r\n");
      out.write("<input type=\"text\" id=\"lng\">\r\n");
      out.write("<button type=\"button\" onclick=\"resSearch()\">검색</button>\r\n");
      out.write("</body>\r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=ef662570a1f847f41f5b1b2e24a22e6a&libraries=services\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("if (navigator.geolocation) {\r\n");
      out.write("\r\n");
      out.write("navigator.geolocation.getCurrentPosition(function(position) {\r\n");
      out.write("    var lat = position.coords.latitude;\r\n");
      out.write("    var lon = position.coords.longitude;\r\n");
      out.write("    document.getElementById(\"lat\").value = lat;\r\n");
      out.write("    document.getElementById(\"lng\").value = lon;\r\n");
      out.write("\tvar mapContainer = document.getElementById('map');\r\n");
      out.write("\tvar geocoder = new kakao.maps.services.Geocoder();\r\n");
      out.write("\t\r\n");
      out.write("\tmapOption = { \r\n");
      out.write("\t    center: new kakao.maps.LatLng(lat, lon),\r\n");
      out.write("\t    level: 3  \r\n");
      out.write("\t}; \r\n");
      out.write("\t\r\n");
      out.write("\tvar map = new kakao.maps.Map(mapContainer, mapOption);\r\n");
      out.write("    var locPosition = new kakao.maps.LatLng(lat, lon);\r\n");
      out.write("    var marker = new kakao.maps.Marker({  \r\n");
      out.write("        map: map, \r\n");
      out.write("        position: locPosition\r\n");
      out.write("    }); \r\n");
      out.write("    \r\n");
      out.write("    map.setCenter(locPosition);\r\n");
      out.write("    \r\n");
      out.write("    searchAddrFromCoords(map.getCenter(), displayCenterInfo);\r\n");
      out.write("\tfunction searchAddrFromCoords(position, callback) {\r\n");
      out.write("\t    geocoder.coord2RegionCode(lon, lat, callback);         \r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction displayCenterInfo(result, status) {\r\n");
      out.write("\t    if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("\t        var infoDiv = document.getElementById('centerAddr');\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t        for(var i = 0; i < result.length; i++) {\r\n");
      out.write("\t            if (result[i].region_type === 'H') {\r\n");
      out.write("\t            \tdocument.getElementById(\"searchKeyword\").value =result[i].address_name; \r\n");
      out.write("\t                infoDiv.innerHTML = result[i].address_name;\r\n");
      out.write("\t                break;\r\n");
      out.write("\t            }\r\n");
      out.write("\t        }\r\n");
      out.write("\t    }    \r\n");
      out.write("\t}\r\n");
      out.write("  });\r\n");
      out.write("} // navigator end\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// 지도를 생성합니다    \r\n");
      out.write("function resSearch() {\r\n");
      out.write("\tvar ps = new kakao.maps.services.Places();\r\n");
      out.write("\tvar lat = document.getElementById(\"lat\").value;\r\n");
      out.write("\tvar lng = document.getElementById(\"lng\").value;\r\n");
      out.write("\tvar mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("    mapOption = {\r\n");
      out.write("        center: new kakao.maps.LatLng(lat, lng), // 지도의 중심좌표\r\n");
      out.write("        level: 3 // 지도의 확대 레벨\r\n");
      out.write("    };  \r\n");
      out.write("\tvar map = new kakao.maps.Map(mapContainer, mapOption);\r\n");
      out.write("\tvar searchKeyword = document.getElementById(\"searchKeyword\").value;\r\n");
      out.write("\tconsole.log(searchKeyword+\"맛집\");\r\n");
      out.write("\tps.keywordSearch(searchKeyword+\"맛집\", placesSearchCB); \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function placesSearchCB (data, status, pagination) {\r\n");
      out.write("    if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("\r\n");
      out.write("        var bounds = new kakao.maps.LatLngBounds();\r\n");
      out.write("\r\n");
      out.write("        for (var i=0; i<data.length; i++) {\r\n");
      out.write("            displayMarker(data[i]);    \r\n");
      out.write("            bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\r\n");
      out.write("        }       \r\n");
      out.write("\r\n");
      out.write("        map.setBounds(bounds);\r\n");
      out.write("    } \r\n");
      out.write("}\r\n");
      out.write("function displayMarker(place) {\r\n");
      out.write("    var marker = new kakao.maps.Marker({\r\n");
      out.write("        map: map,\r\n");
      out.write("        position: new kakao.maps.LatLng(place.y, place.x) \r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    kakao.maps.event.addListener(marker, 'click', function() {\r\n");
      out.write("        infowindow.setContent('<div style=\"padding:5px;font-size:12px;\">' + place.place_name + '</div>');\r\n");
      out.write("        infowindow.open(map, marker);\r\n");
      out.write("    });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
