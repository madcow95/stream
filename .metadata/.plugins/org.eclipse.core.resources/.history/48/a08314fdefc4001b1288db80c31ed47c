package com.moviestream.movie.member;


import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Random;

import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.moviestream.movie.member.domain.MemberDTO;
import com.moviestream.movie.member.service.IMemberService;

import lombok.extern.log4j.Log4j;

@Controller
@RequestMapping("/member")
@Log4j
public class MemberController {
	
	@Autowired
	private IMemberService service;
	
	// 단순 페이지이동
	@RequestMapping("/login")
	public void login() {
	}
	@RequestMapping("/contract")
	public void contract() {
	}
	@RequestMapping("/mypage")
	public void mypage() {
	}
	@RequestMapping("/findid")
	public void findId() {
	}
	@RequestMapping("/findPwd")
	public void findPwd() {
	}
	@RequestMapping("/join")
	public void toJoin() {
	}
	@RequestMapping("/jusoPopup")
	public void juso() {
	}
	@RequestMapping("/changePwd")
	public void changePwd() {
	}
	@GetMapping("/login_fail")
	public void login_fail(Authentication auth) {
		log.info("login fail");
		log.info("access denied : " + auth);
	}
	
	@PostMapping("/updateForm")
	public String change(MemberDTO mDto) throws Exception {
		BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
		MemberDTO memList = service.read(mDto.getId());
		if(encoder.matches(mDto.getPwd(), memList.getPwd())) {
			return "redirect:/member/updateForm";
		} else {
			return "member/result/login_fail";
		}
	}
	@GetMapping("updateForm")
	public void changeForm() {
	}
	
	@PostMapping(value = "/id_check")
	public @ResponseBody Map<String, Integer> id_check(@RequestBody String id) throws Exception {
		Map<String, Integer> checkMap = new HashMap<>();
		int result = -1;
		id = id.replaceAll("\"", "");
		result = service.id_check(id);
		if(result > 0) {
			result = 1;
		}
		checkMap.put("message", result);
		return checkMap;
	}
	
	@RequestMapping(value = "/join", method = RequestMethod.POST)
	public String join(MemberDTO mDto, @RequestParam("DetailAddress") String detailAddr) throws Exception {
		String url = "member/result/login_fail";
		BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
		String encodedPwd = encoder.encode(mDto.getPwd());
		String detailAddress = mDto.getAddress() + detailAddr;
		mDto.setAddress(detailAddress);
		mDto.setPwd(encodedPwd);
		int result = service.join(mDto);
		if (result > 0) {
			service.authJoin(mDto);
			url = "member/result/join_suc";
		}
		return url;
	}
	
	@RequestMapping(value = "/find", method = RequestMethod.POST)
	public String findId(MemberDTO mDto, Model model) throws Exception {
		log.info(mDto);
		List<MemberDTO> memList = service.getMember();
		String uri = "member/result/login_fail";
		
//		if(mDto.getId() == null && mDto.getName() != null && mDto.getEmail() != null) {
//			
//			for(int i = 0; i< memList.size(); i++) {
//				if(memList.get(i).getName().equals(mDto.getName()) && memList.get(i).getEmail().equals(mDto.getEmail())) {
//					String host = "smtp.gmail.com";
//					final String username = "lobasketve@gmail.com";
//					final String password = "sdtcow031#";
//					
//					String recipient = mDto.getEmail();
//					
//					String subject = "요청하신 정보입니다.";
//					String body = "회원님의 아이디는 >>> "+memList.get(i).getId()+ "입니다.";
//					
//					Properties props = System.getProperties();
//					
//					props.put("mail.smtps.auth", "true");
//					
//					Session session = Session.getDefaultInstance(props);
//					MimeMessage msg = new MimeMessage(session);
//					
//					try {
//						msg.setSubject(subject);
//						msg.setText(body);
//						msg.setFrom(new InternetAddress(username));
//						msg.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));
//						
//						Transport transport = session.getTransport("smtps");
//						transport.connect(host, username, password);
//						transport.sendMessage(msg, msg.getAllRecipients());
//						transport.close();
//					} catch (Exception e) {
//						e.printStackTrace();
//					}
//					uri = "member/login";
//				} 
//			} // for end
//		} // if end
		
		else if(mDto.getId() !=null && mDto.getName() == null && mDto.getEmail() != null){
			for(int i = 0; i < memList.size(); i++) {
				if(memList.get(i).getId().equals(mDto.getId()) && memList.get(i).getEmail().equals(mDto.getEmail())) {
					Random rnd = new Random();
					int rndNum = rnd.nextInt(100000) + 1;
					int code = 0;
					if(rndNum >= 10000) {
						code = rndNum;
					}
					String host = "smtp.gmail.com";
					final String username = "lobasketve@gmail.com";
					final String password = "sdtcow031#";
					
					String recipient = mDto.getEmail();
					
					String subject = "인증번호 메일";
					String body = "입력해주세요 >>> "+code;
					
					Properties props = System.getProperties();
					
					props.put("mail.smtps.auth", "true");
					
					Session session = Session.getDefaultInstance(props);
					MimeMessage msg = new MimeMessage(session);
					
					try {
						msg.setSubject(subject);
						msg.setText(body);
						msg.setFrom(new InternetAddress(username));
						msg.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));
						
						Transport transport = session.getTransport("smtps");
						transport.connect(host, username, password);
						transport.sendMessage(msg, msg.getAllRecipients());
						transport.close();
					} catch (Exception e) {
						e.printStackTrace();
					}
					model.addAttribute("code", code);
					uri = "member/enterPwdCode";
				} else {
					log.info("아이디, 이메일 일치하는 회원 없음");
				}
			}
		}
		return uri;
	}
	
	@RequestMapping(value = "/changePwd", method = RequestMethod.POST)
	public String changepwd(@RequestParam("password") String pwd,
							@RequestParam("passwordCheck") String pwdChk) throws Exception {
		log.info("password AND passwordCheck >>>> " + pwd +" &&& " + pwdChk);
		return "member/login";
	}
	
	@PostMapping("/update")
	public String updateInfo(MemberDTO mDto) throws Exception {
		log.info("update Info DTO >>>>> "+mDto);
		return "";
	}
}
