package com.moviestream.movie.movie;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.moviestream.movie.board.domain.MovieInfoDTO;
import com.moviestream.movie.movie.service.IMovieService;

import lombok.extern.log4j.Log4j;

@Controller
@RequestMapping("/movie")
@Log4j
public class MovieController {

	@Autowired
	private IMovieService service;
	
	
	@RequestMapping(value = "/enroll", method = RequestMethod.POST)
	public String enrollMovie() throws Exception{
		return "";
	}
	
	// 동기방식
	@RequestMapping(value = "/boardSearch", method = RequestMethod.GET)
	public String movieBoard(@RequestParam("keyword") String keyword, Model model) throws Exception {
		String clientId = "5QM_wfDAdLPm12A5by6q"; //애플리케이션 클라이언트 아이디값"
        String clientSecret = "Dxo2BaBD_q"; //애플리케이션 클라이언트 시크릿값"
        String text = null;
        try {
            text = URLEncoder.encode(keyword, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException("검색어 인코딩 실패",e);
        }
        String apiURL = "https://openapi.naver.com/v1/search/movie.json?query=" + text;    // json 결과
        //String apiURL = "https://openapi.naver.com/v1/search/blog.xml?query="+ text; // xml 결과

        Map<String, String> requestHeaders = new HashMap<>();
        requestHeaders.put("X-Naver-Client-Id", clientId);
        requestHeaders.put("X-Naver-Client-Secret", clientSecret);
        String responseBody = service.get(apiURL,requestHeaders);

        JSONParser jsonParser = new JSONParser();
        JSONObject jsonObject = (JSONObject) jsonParser.parse(responseBody);
        JSONArray infoArray = (JSONArray) jsonObject.get("items");
        MovieInfoDTO movieInfo = null;
        List<MovieInfoDTO> mList = new ArrayList<>();
        for(int i = 0; i < infoArray.size(); i++) {
            JSONObject itemObject = (JSONObject) infoArray.get(i);
            String title = (String)itemObject.get("title");
            String subtitle = (String)itemObject.get("subtitle");
            String director = (String)itemObject.get("director");
            String actor = (String)itemObject.get("actor");
            String image = (String)itemObject.get("image");
            String userRating = (String)itemObject.get("userRating");
            String link = (String)itemObject.get("link");
            movieInfo = new MovieInfoDTO();
            movieInfo.setTitle(title);
            movieInfo.setSubtitle(subtitle);
            movieInfo.setDirector(director);
            movieInfo.setActor(actor);
            movieInfo.setImage(image);
            movieInfo.setUserRating(userRating);
            movieInfo.setLink(link);
        	mList.add(movieInfo);
        }
        model.addAttribute("movieList", mList);
        return "/board/movieBoard";
}
	
	// 비동기방식
	@RequestMapping(value = "/boardSearchtest", method = RequestMethod.GET)
	public @ResponseBody Map<String, List<MovieInfoDTO>> movieBoardPost(@RequestParam("keyword") String keyword, Model model) throws Exception {
		String clientId = "5QM_wfDAdLPm12A5by6q"; //애플리케이션 클라이언트 아이디값"
		String clientSecret = "Dxo2BaBD_q"; //애플리케이션 클라이언트 시크릿값"
		String text = null;
//		log.info("영화 정보 dto >>> "+infoList.toString());
		try {
			text = URLEncoder.encode(keyword, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			throw new RuntimeException("검색어 인코딩 실패",e);
		}
		String apiURL = "https://openapi.naver.com/v1/search/movie.json?&query=" + text;    // json 결과
		//String apiURL = "https://openapi.naver.com/v1/search/blog.xml?query="+ text; // xml 결과
		
		Map<String, String> requestHeaders = new HashMap<>();
		requestHeaders.put("X-Naver-Client-Id", clientId);
		requestHeaders.put("X-Naver-Client-Secret", clientSecret);
		String responseBody = service.get(apiURL,requestHeaders);
		JSONParser jsonParser = new JSONParser();
		JSONObject jsonObject = (JSONObject) jsonParser.parse(responseBody);
		JSONArray infoArray = (JSONArray) jsonObject.get("items");
		MovieInfoDTO movieInfo = null;
		List<MovieInfoDTO> mList = new ArrayList<>();
		for(int i = 0; i < infoArray.size(); i++) {
			JSONObject itemObject = (JSONObject) infoArray.get(i);
			String title = (String)itemObject.get("title");
			String subtitle = (String)itemObject.get("subtitle");
			String director = (String)itemObject.get("director");
			String actor = (String)itemObject.get("actor");
			String image = (String)itemObject.get("image");
			String userRating = (String)itemObject.get("userRating");
			String link = (String)itemObject.get("link");
			movieInfo = new MovieInfoDTO();
			movieInfo.setTitle(title);
			movieInfo.setSubtitle(subtitle);
			movieInfo.setDirector(director);
			movieInfo.setActor(actor);
			movieInfo.setImage(image);
			movieInfo.setUserRating(userRating);
			movieInfo.setLink(link);
//			log.info("검색이 완료된 영화 목록 >>> "+movieInfo);
			mList.add(movieInfo);
		}
		Map<String, List<MovieInfoDTO>> movieMap = new HashMap<>();
		movieMap.put("mList", mList);
//		model.addAttribute("movieList", mList);
		return movieMap;
	}
	
	// 영화 sql에 저장
	@RequestMapping(value = "/saveMovie", method = RequestMethod.GET)
	public @ResponseBody void saveMovieInfo(@RequestParam("jsonData") String jsonData) throws Exception {
		JSONParser parser = new JSONParser();
		JSONArray infoArr = (JSONArray) parser.parse(jsonData);
		MovieInfoDTO movieInfo = null;
		
		if(infoArr.size() > 0) {
			for(int i = 0; i < infoArr.size(); i++) {
				JSONObject itemObject = (JSONObject) infoArr.get(i);
				String title = (String)itemObject.get("title");
				String subtitle = (String)itemObject.get("subtitle");
				String director = (String)itemObject.get("director");
				String actor = (String)itemObject.get("actor");
				String image = (String)itemObject.get("image");
				String userRating = (String)itemObject.get("userRating");
				String link = (String)itemObject.get("link");
				movieInfo = new MovieInfoDTO();
				movieInfo.setTitle(title);
				movieInfo.setSubtitle(subtitle);
				movieInfo.setDirector(director);
				movieInfo.setActor(actor);
				movieInfo.setImage(image);
				movieInfo.setUserRating(userRating);
				movieInfo.setLink(link);
				service.saveMovie(movieInfo);
				service.delSameInfo(link);
			}
		}
	}
	
	@RequestMapping("/testsearch")
	public @ResponseBody void testSearch(@RequestParam("keyword") String keyword) throws Exception {
		log.info(keyword);
	}
}
