package com.moviestream.movie.board;

import java.net.URLEncoder;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.moviestream.movie.board.domain.BoardAttachDTO;
import com.moviestream.movie.board.domain.BoardDTO;
import com.moviestream.movie.board.domain.Criteria;
import com.moviestream.movie.board.domain.FreeCriteria;
import com.moviestream.movie.board.domain.PageDTO;
import com.moviestream.movie.board.service.IBoardService;

import lombok.extern.log4j.Log4j;

@Controller
@RequestMapping("/board")
@Log4j
public class BoardController {
	
	private String uploadPath = "C:\\Users\\choi\\Desktop\\spring\\springstudy\\src\\main\\webapp\\resources\\fileUpload";
	
	@Autowired
	private IBoardService service;
	
	@GetMapping("/register")
	public void registerGet() {
	}
	
	@PostMapping("/register")
	public String registerPost(BoardDTO bDto, RedirectAttributes rttr) throws Exception{
		log.info("register post>>>>>>>>>>>>>>>>>>>>>."+bDto);
		
		log.info("=====================================================");
		if (bDto.getAttachList() != null) {
			bDto.getAttachList().forEach(attach -> log.info(""+attach));
		}
		log.info("=====================================================");
		
		service.register(bDto);
		
		rttr.addFlashAttribute("result", bDto.getArticleno());
		return "redirect:/board/freeBoard";
	}
	
	// 공지사항
	@RequestMapping("/list")
	public void boardList(Model model, Criteria cri) throws Exception {
		model.addAttribute("boardList", service.boardList(cri));
		model.addAttribute("pageMaker", new PageDTO(cri, service.getTotalCnt(cri)));
	}
	
	// 자유게시판
	@RequestMapping("/freeBoard")
	public void freeBoard(Model model, FreeCriteria cri) throws Exception {
		log.info("freeboard >>> "+cri);
		model.addAttribute("freeBoard", service.freeBoard(cri));
		model.addAttribute("pageMaker2", new PageDTO(cri, service.getFreeTotalCnt(cri)));
	}
	
	@RequestMapping({"/freeboardread","/freeboardmodify"})
	public void freeboardread(Criteria cri, BoardDTO bDto, Model model) throws Exception {
		log.info("freeread >>>> " + cri + "articleno >>> " + bDto.getArticleno());
		model.addAttribute("boardList", service.read(bDto.getArticleno()));
		model.addAttribute("cri", cri);
	}
	@RequestMapping({"/read","/modify"})
	public void read(Criteria cri, @RequestParam("articleno") int articleno, Model model) throws Exception {
		log.info("read >>>> " + cri + "articleno >>> " + articleno);
		model.addAttribute("boardList", service.read(articleno));
		model.addAttribute("cri", cri);
	}
	
	@RequestMapping(value = "/modify", method = RequestMethod.POST)
	public String modify(BoardDTO bDto,Criteria cri, RedirectAttributes redirect) throws Exception {
		String uri = "update_fail";
		String encodeKeyword = URLEncoder.encode(cri.getKeyword(), "UTF-8");
		String encodeType = URLEncoder.encode(cri.getType(), "UTF-8");
		if(service.modify(bDto) == true) {
			uri = "redirect:/board/read?pageNum="+cri.getPageNum()+"&keyword="+encodeKeyword+"&type="+encodeType+"&articleno="+bDto.getArticleno();
		}
		
		return uri;
	}
	
	@RequestMapping(value = "/remove")
	public String remove(BoardDTO bDto, Criteria cri) throws Exception {
		log.info("remove artNo >>>> "+bDto.getArticleno());
		String uri = "remove_fail";
		if(service.remove(bDto) == true) {
			String encodeKeyword = URLEncoder.encode(cri.getKeyword(), "UTF-8");
			String encodeType = URLEncoder.encode(cri.getType(), "UTF-8");
			uri = "redirect:/board/list?pageNum="+cri.getPageNum()+"&keyword="+encodeKeyword+"&type="+encodeType;
		}
		return uri;
	}
	
	@RequestMapping(value = "/movieBoard", method = RequestMethod.GET)
	public String board() {
		return "/board/movieBoard";
	}
	@RequestMapping(value = "/movieBoardtest", method = RequestMethod.GET)
	public String boardTest() {
		return "/board/movieBoard_test";
	}
	
	@GetMapping(value = "/getAttachList",
			produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseBody
	public ResponseEntity<List<BoardAttachDTO>> getAttachList(Integer bno) throws Exception {
		log.info("getAttachList : bno ================ " + bno);
		
		return new ResponseEntity<>(service.getAttachList(bno), HttpStatus.OK);
	}
	
}
